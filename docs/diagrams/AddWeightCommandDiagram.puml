@startuml
title Mama â€“ AddWeightCommand Class Diagram

skinparam classAttributeIconSize 0
skinparam packageStyle rectangle
skinparam shadowing false

package "seedu.mama.command" {
  interface Command {
    +execute(list: EntryList, storage: Storage): CommandResult
    +isExit(): boolean
  }

  class CommandResult {
    -feedbackToUser: String
    -isExit: boolean
    --
    +CommandResult(feedbackToUser: String)
    +CommandResult(feedbackToUser: String, isExit: boolean)
    +getFeedbackToUser(): String
    +isExit(): boolean
    +toString(): String
  }

  class CommandException {
    +CommandException(message: String)
    +CommandException(message: String, cause: Throwable)
  }

  class AddWeightCommand implements Command {
    -LOG: Logger <<static>>
    -weightInput: int
    --
    +AddWeightCommand(weightInput: int)
    +execute(list: EntryList, storage: Storage): CommandResult
  }
}

package "seedu.mama.model" {
  abstract class Entry {
    -type: String
    -description: String
    --
    +type(): String
    +description(): String
    +toListLine(): String
    +contains(keyword: String): Boolean
    +toStorageString(): String
  }

  class EntryList {
    -items: List<Entry>
    -shown: List<Entry>
    -currentFilter: Predicate<Entry>
    --
    +add(e: Entry): void
    +size(): int
    +get(i: int): Entry
    +asList(): List<Entry>
  }

  class WeightEntry {
      + WeightEntry(description: String)
      + getWeight() : String
      + toStorageString() : String
      + fromStorage(line: String) : WeightEntry
  }

}

package "seedu.mama.storage" {
  class Storage {
    -file: Path
    --
    +save(list: EntryList): void
    +loadOrEmpty(): EntryList
  }
}

package "java.util.logging" {
  class Logger
}

package "java.util" {
  interface List<T>
}

package "java.util.function" {
  interface Predicate<T>
}

' ====================
' Relationships
' ====================

AddWeightCommand ..|> Command
AddWeightCommand ..> EntryList : uses
AddWeightCommand ..> Storage : saves data
AddWeightCommand ..> CommandResult : returns
AddWeightCommand ..> CommandException : throws
AddWeightCommand ..> WeightEntry : creates and updates
AddWeightCommand ..> Logger : logs activity

EntryList "1" o-- "many" Entry
WeightEntry --|> Entry
Storage --> EntryList

@enduml
